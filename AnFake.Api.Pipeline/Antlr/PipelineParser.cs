//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Pipeline.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace AnFake.Api.Pipeline.Antlr {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
//[System.CLSCompliant(false)]
public partial class PipelineParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, Identifier=8, 
		QuotedIdentifier=9, Spaces=10;
	public const int
		RULE_pipeline = 0, RULE_step = 1, RULE_unaryStep = 2, RULE_optionalBuildRun = 3, 
		RULE_buildRun = 4, RULE_buildRunName = 5;
	public static readonly string[] ruleNames = {
		"pipeline", "step", "unaryStep", "optionalBuildRun", "buildRun", "buildRunName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'=>'", "'->'", "'('", "')'", "'['", "']'", "'as'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "Identifier", "QuotedIdentifier", 
		"Spaces"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pipeline.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PipelineParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class PipelineContext : ParserRuleContext {
		public StepContext step() {
			return GetRuleContext<StepContext>(0);
		}
		public PipelineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pipeline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.EnterPipeline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.ExitPipeline(this);
		}
	}

	[RuleVersion(0)]
	public PipelineContext pipeline() {
		PipelineContext _localctx = new PipelineContext(Context, State);
		EnterRule(_localctx, 0, RULE_pipeline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; step(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepContext : ParserRuleContext {
		public StepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_step; } }
	 
		public StepContext() { }
		public virtual void CopyFrom(StepContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InternalUnaryStepContext : StepContext {
		public UnaryStepContext unaryStep() {
			return GetRuleContext<UnaryStepContext>(0);
		}
		public InternalUnaryStepContext(StepContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.EnterInternalUnaryStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.ExitInternalUnaryStep(this);
		}
	}
	public partial class InternalSequentialStepContext : StepContext {
		public StepContext step() {
			return GetRuleContext<StepContext>(0);
		}
		public UnaryStepContext unaryStep() {
			return GetRuleContext<UnaryStepContext>(0);
		}
		public InternalSequentialStepContext(StepContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.EnterInternalSequentialStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.ExitInternalSequentialStep(this);
		}
	}
	public partial class InternalParallelStepContext : StepContext {
		public StepContext step() {
			return GetRuleContext<StepContext>(0);
		}
		public UnaryStepContext unaryStep() {
			return GetRuleContext<UnaryStepContext>(0);
		}
		public InternalParallelStepContext(StepContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.EnterInternalParallelStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.ExitInternalParallelStep(this);
		}
	}

	[RuleVersion(0)]
	public StepContext step() {
		return step(0);
	}

	private StepContext step(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StepContext _localctx = new StepContext(Context, _parentState);
		StepContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_step, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new InternalUnaryStepContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 15; unaryStep();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 25;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 23;
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						_localctx = new InternalParallelStepContext(new StepContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_step);
						State = 17;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 18; Match(T__0);
						State = 19; unaryStep();
						}
						break;
					case 2:
						{
						_localctx = new InternalSequentialStepContext(new StepContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_step);
						State = 20;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 21; Match(T__1);
						State = 22; unaryStep();
						}
						break;
					}
					} 
				}
				State = 27;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryStepContext : ParserRuleContext {
		public BuildRunContext buildRun() {
			return GetRuleContext<BuildRunContext>(0);
		}
		public OptionalBuildRunContext optionalBuildRun() {
			return GetRuleContext<OptionalBuildRunContext>(0);
		}
		public StepContext step() {
			return GetRuleContext<StepContext>(0);
		}
		public UnaryStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryStep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.EnterUnaryStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.ExitUnaryStep(this);
		}
	}

	[RuleVersion(0)]
	public UnaryStepContext unaryStep() {
		UnaryStepContext _localctx = new UnaryStepContext(Context, State);
		EnterRule(_localctx, 4, RULE_unaryStep);
		try {
			State = 34;
			switch (TokenStream.La(1)) {
			case Identifier:
			case QuotedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 28; buildRun();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29; optionalBuildRun();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 30; Match(T__2);
				State = 31; step(0);
				State = 32; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalBuildRunContext : ParserRuleContext {
		public BuildRunContext buildRun() {
			return GetRuleContext<BuildRunContext>(0);
		}
		public OptionalBuildRunContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalBuildRun; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.EnterOptionalBuildRun(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.ExitOptionalBuildRun(this);
		}
	}

	[RuleVersion(0)]
	public OptionalBuildRunContext optionalBuildRun() {
		OptionalBuildRunContext _localctx = new OptionalBuildRunContext(Context, State);
		EnterRule(_localctx, 6, RULE_optionalBuildRun);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(T__4);
			State = 37; buildRun();
			State = 38; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuildRunContext : ParserRuleContext {
		public BuildRunContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_buildRun; } }
	 
		public BuildRunContext() { }
		public virtual void CopyFrom(BuildRunContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InternalBuildRunVoidContext : BuildRunContext {
		public BuildRunNameContext buildRunName() {
			return GetRuleContext<BuildRunNameContext>(0);
		}
		public InternalBuildRunVoidContext(BuildRunContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.EnterInternalBuildRunVoid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.ExitInternalBuildRunVoid(this);
		}
	}
	public partial class InternalBuildRunInOutContext : BuildRunContext {
		public BuildRunNameContext buildRunName() {
			return GetRuleContext<BuildRunNameContext>(0);
		}
		public ITerminalNode[] Identifier() { return GetTokens(PipelineParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(PipelineParser.Identifier, i);
		}
		public InternalBuildRunInOutContext(BuildRunContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.EnterInternalBuildRunInOut(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.ExitInternalBuildRunInOut(this);
		}
	}
	public partial class InternalBuildRunInContext : BuildRunContext {
		public BuildRunNameContext buildRunName() {
			return GetRuleContext<BuildRunNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(PipelineParser.Identifier, 0); }
		public InternalBuildRunInContext(BuildRunContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.EnterInternalBuildRunIn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.ExitInternalBuildRunIn(this);
		}
	}
	public partial class InternalBuildRunOutContext : BuildRunContext {
		public BuildRunNameContext buildRunName() {
			return GetRuleContext<BuildRunNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(PipelineParser.Identifier, 0); }
		public InternalBuildRunOutContext(BuildRunContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.EnterInternalBuildRunOut(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.ExitInternalBuildRunOut(this);
		}
	}

	[RuleVersion(0)]
	public BuildRunContext buildRun() {
		BuildRunContext _localctx = new BuildRunContext(Context, State);
		EnterRule(_localctx, 8, RULE_buildRun);
		try {
			State = 57;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new InternalBuildRunVoidContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; buildRunName();
				}
				break;
			case 2:
				_localctx = new InternalBuildRunInContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; buildRunName();
				State = 42; Match(T__2);
				State = 43; Match(Identifier);
				State = 44; Match(T__3);
				}
				break;
			case 3:
				_localctx = new InternalBuildRunOutContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 46; buildRunName();
				State = 47; Match(T__6);
				State = 48; Match(Identifier);
				}
				break;
			case 4:
				_localctx = new InternalBuildRunInOutContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 50; buildRunName();
				State = 51; Match(T__2);
				State = 52; Match(Identifier);
				State = 53; Match(T__3);
				State = 54; Match(T__6);
				State = 55; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuildRunNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(PipelineParser.Identifier, 0); }
		public ITerminalNode QuotedIdentifier() { return GetToken(PipelineParser.QuotedIdentifier, 0); }
		public BuildRunNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_buildRunName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.EnterBuildRunName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineListener typedListener = listener as IPipelineListener;
			if (typedListener != null) typedListener.ExitBuildRunName(this);
		}
	}

	[RuleVersion(0)]
	public BuildRunNameContext buildRunName() {
		BuildRunNameContext _localctx = new BuildRunNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_buildRunName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_la = TokenStream.La(1);
			if ( !(_la==Identifier || _la==QuotedIdentifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return step_sempred((StepContext)_localctx, predIndex);
		}
		return true;
	}
	private bool step_sempred(StepContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\f@\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x1A\n\x3\f\x3\xE\x3"+
		"\x1D\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4%\n\x4\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6<\n\x6\x3\a\x3\a\x3"+
		"\a\x2\x3\x4\b\x2\x4\x6\b\n\f\x2\x3\x3\x2\n\v@\x2\xE\x3\x2\x2\x2\x4\x10"+
		"\x3\x2\x2\x2\x6$\x3\x2\x2\x2\b&\x3\x2\x2\x2\n;\x3\x2\x2\x2\f=\x3\x2\x2"+
		"\x2\xE\xF\x5\x4\x3\x2\xF\x3\x3\x2\x2\x2\x10\x11\b\x3\x1\x2\x11\x12\x5"+
		"\x6\x4\x2\x12\x1B\x3\x2\x2\x2\x13\x14\f\x4\x2\x2\x14\x15\a\x3\x2\x2\x15"+
		"\x1A\x5\x6\x4\x2\x16\x17\f\x3\x2\x2\x17\x18\a\x4\x2\x2\x18\x1A\x5\x6\x4"+
		"\x2\x19\x13\x3\x2\x2\x2\x19\x16\x3\x2\x2\x2\x1A\x1D\x3\x2\x2\x2\x1B\x19"+
		"\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x5\x3\x2\x2\x2\x1D\x1B\x3\x2\x2\x2"+
		"\x1E%\x5\n\x6\x2\x1F%\x5\b\x5\x2 !\a\x5\x2\x2!\"\x5\x4\x3\x2\"#\a\x6\x2"+
		"\x2#%\x3\x2\x2\x2$\x1E\x3\x2\x2\x2$\x1F\x3\x2\x2\x2$ \x3\x2\x2\x2%\a\x3"+
		"\x2\x2\x2&\'\a\a\x2\x2\'(\x5\n\x6\x2()\a\b\x2\x2)\t\x3\x2\x2\x2*<\x5\f"+
		"\a\x2+,\x5\f\a\x2,-\a\x5\x2\x2-.\a\n\x2\x2./\a\x6\x2\x2/<\x3\x2\x2\x2"+
		"\x30\x31\x5\f\a\x2\x31\x32\a\t\x2\x2\x32\x33\a\n\x2\x2\x33<\x3\x2\x2\x2"+
		"\x34\x35\x5\f\a\x2\x35\x36\a\x5\x2\x2\x36\x37\a\n\x2\x2\x37\x38\a\x6\x2"+
		"\x2\x38\x39\a\t\x2\x2\x39:\a\n\x2\x2:<\x3\x2\x2\x2;*\x3\x2\x2\x2;+\x3"+
		"\x2\x2\x2;\x30\x3\x2\x2\x2;\x34\x3\x2\x2\x2<\v\x3\x2\x2\x2=>\t\x2\x2\x2"+
		">\r\x3\x2\x2\x2\x6\x19\x1B$;";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AnFake.Api.Pipeline.Antlr
